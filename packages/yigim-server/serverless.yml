service:
  name: yigim-server

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  environment:
    STAGE: ${self:custom.stage}
  timeout: 30
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
        - dynamodb:GetItem
        - dynamodb:CreateItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:*
custom:
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  webpack:
    keepOutputDirectory: true
    includeModules: true
    packager: yarn
  serverless-offline:
    httpPort: 9000
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
functions:
  #  --- http ---
  problemCreate:
    handler: src/http/problemCreate.handler
    events:
      - http:
          method: post
          cors: true
          path: problemCreate
resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: 'user'
    ProblemTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: 'problem'
